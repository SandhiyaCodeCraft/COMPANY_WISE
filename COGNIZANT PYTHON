1.
l = list(map(int, input().split()))
l.sort()

count = 0   # number of subarrays formed.............note formed
index = 0   # position inside current subarray

for num in l:
    if num >= index:
        index += 1
    else:
        count += 1    # close current subarray
        index = 1     # start new subarray with this num.....why index=1 means in 0 the wrong element goes there and check the next element with index 1

if index > 0:..........if any subarray is forming ..add that
    count += 1

print(count)

2.
s=input()
c=0
for i in range(len(s)-1):
    if s[i]==s[i+1]:
        c+=1
print(c)

3.....................correct approach
n=int(input())
l=list(map(int,input().split()))
u=[]
d=[]
missing=sorted([i for i in range(1,n+1) if i not in l])
for i in l:
    if i not in u:
        u.append(i)
    else:
        d.append(i)
Dup=sorted(d)
s=0
for i,j in zip(missing,Dup):
    s+=(i-j)
print(s)

7.
l=list(map(int,input().split()))
max_sum=0
sub=[]
for i in range(len(l)):
    sub.append(l[i])
    temp=sum(sub)
    max_sum=max(max_sum,temp)
print(max_sum)

12.
n=int(input())
m=int(input())
A=list(map(int,input().split()))
B=list(map(int,input().split()))
max_b=0
for i in range(len(B)):
    for j in range(i+1,len(B)):
        sub=(B[i],B[j])
        if sum(sub)<=m:
            temp=A[i]+A[j]
            max_b=max(max_b,temp)
print(max_b)

14.

n=int(input())
m=int(input())
l=list(map(int,input().split()))
l.sort()
c=0
s=0
for i in l:
    if s+i<=m:
        s=s+i
        c+=1
print(c)

17.
import math
def isprime(n):
    if n<=1:
        return False
    for i in range(2,int(math.sqrt(n))+1):
        if n%i==0:
            return False
    return True
n=int(input())
k=int(input())
l=list(map(int,input().split()))
s=0
for i in range(1,n+1):
    if isprime(i)==True:
        if l[i-1]>=k:
            s+=k
        else:
            s+=l[i-1]
print(s)

21.

n=int(input())
l=list(map(int,input().split()))
arr=list(sorted(set(l),reverse=True))
rs=sum(arr[:n])
print(rs-arr[0])

22.
def count_palindromes(s, n):
    l, r = 0, len(s) - 1
    ans = 1
    while l <= r:
        if s[l] == '_' and s[r] == '_':
            # middle character (odd length) â†’ 26 ways
            if l == r:
                ans = (ans * 26) % n
            else:
                ans = (ans * 26) % n
        elif s[l] == '_':
            # must match s[r]
            ans = (ans * 1) % n
        elif s[r] == '_':
            # must match s[l]
            ans = (ans * 1) % n
        else:
            if s[l] != s[r]:
                return 0
        l += 1
        r -= 1
    return ans % n


# Example usage
s = "a_b_a"
n = 1000000007
print(count_palindromes(s, n))  # Output: 26
18.
import math

def unique_marbles(N, A, B):
    g = math.gcd(A, B)
    r = N % g
    if r == 0:
        r = g
    return ((N - r) // g) + 1

24.
import math
def isprime(n):
    if n<=1:
        return False
    for i in range(2,int(math.sqrt(n))+1):
        if n%i==0:
            return False
    return True
n=int(input())
res=set()
for i in range(1,n+1):
    if n%i==0 and isprime(i)==True:
        res.add(i)
print(sum(res))

25.
l=list(map(int,input().split()))
res=sorted([i for i in l if i>0])
m=len(res)//2
if len(res)%2!=0:
    print(res[m])
else:
    print((res[m]+res[m-1])//2)

28.
total = 0
    for char in s:
        total += ord(char)
    return total

29.
from collections import Counter

def frequency_sort(arr):
    freq = Counter(arr)
    sorted_arr = sorted(arr, key=lambda x: (-freq[x], x))
    return sorted_arr

31.
s=input()
S=s.split()
res=' '.join([i[::-1]for i in S])
print(res)

36.
from collections import Counter
s=input()
d=Counter(s)
max=max(d.values())
res=[i for i in s if d[i]==max]
print(res[0]) 


37.
def countvalues(n):
    def starsum(m):
        m=str(m)
        s=''
        total=0
        for i in range(len(m)):
            s+=m[i]
            total+=int(s)
        return total
    c=0
    for m in range(1,n+1):
        res=starsum(m)
        if res > n:
            c+=1
    return c
n=int(input())
print(countvalues(n))

38.

def highsqcube(n):
    hsr=int(n**0.5)
    hcr=int(n**(1/3))
    hsv=hsr**2
    hcv=hcr**3
    return hsv+hcv
n=int(input())
print(highsqcube(n))
    
