10.
s=input()
res=[]
c=1
for i in range(1,len(s)):
    if s[i]==s[i-1]:
        c+=1
    else:
        if c==1:
            res.append(s[i-1])
        else:
            if not res or res[-1]!='#':
                res.append('#')
        c=1
if c==1:
    res.append(s[-1])
else:
     if not res or res[-1]!='#':
                res.append('#')
print(res)


9.
n=int(input())
k=int(input())
l=list(map(int,input().split()))
li=[i-k for i in l]
res=[i for i in li if i>k]
print(len(res))

8.
l=list(map(int,input().split()))
s=input()
c=0
for i in s:
    a=str(ord(i))
    for j in a:
        if int(j) in l:
            c+=1
            break
print(c)

7.
N=int(input())
A=list(map(int,input().split()))
B=list(map(int,input().split()))
res=[]
for i in range(N):
    if A[i]==B[i]:
        res.append(A[i])
    else:
        res.append(max(A[i],B[i]))
print(res)

6.
from collections import Counter
s1=input()
s2=input()
c=0
R2=Counter(s1)
R3=Counter(s2)
res=set(s1)&set(s2)..............finding persons who visited both rooms
for i in res:
    if R2.get(i,0)==2 and R3.get(i)==3:
        c+=1
print(c)

4.
s = input()
c = 0
tem = ''

for i in range(len(s)):
    if s[i].isdigit():
        tem += s[i]
    else:
        if tem:  # we just finished a digit substring
            start = i - len(tem)
            end = i - 1
            if start > 0 and s[start-1].isalpha() and s[i].isalpha():
                c += 1
        tem = ''
print(c)

i/p:
Input: "a2a3b12ac"
Output: 2 

1.

def solve(N, X):
    A = list(range(1, N + 1))...............creating list
    B = []
    for i in range(N):
        if i == N - 1:
            B.append(A[i] + A[0])
        else:
            B.append(A[i] + A[i + 1]
    total_sum = sum(num for num in B if num % X == 0)
    
    return total_sum

2.
 count = 0
    for i in range(len(S1) - K + 1):
        substring = S1[i:i+K]................they are already unique no need to be create set
        if substring in S2:..............we dont neeed to collect substring of s2...instead we can check in s2
            count += 1
    return count

3.
def is_subsequence(small, big):
    i,j=0,0
    while i < len(small) and j < len(big):
        if small[i] == big[j]:
            i += 1
        j += 1
    return i == len(small)

def check_contained(s1, s2):
    w1 = s1.split()
    w2 = s2.split()

    res1 = is_subsequence(w1, w2)  
    res2 = is_subsequence(w2, w1)  

    if res1 and res2:
        return s1 if len(w1) <= len(w2) else s2
    elif res1:
        return s1
    elif res2:
        return s2
    else:
        return "NONE"
s1 = input().strip()
s2 = input().strip()
print(check_contained(s1, s2))
